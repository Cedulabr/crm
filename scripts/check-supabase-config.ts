import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import path from 'path';

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

const SUPABASE_URL = process.env.VITE_SUPABASE_URL || '';
const SUPABASE_KEY = process.env.VITE_SUPABASE_KEY || '';

async function checkSupabaseConfig() {
  console.log('Verificando configura√ß√£o do Supabase...');
  console.log('SUPABASE_URL:', SUPABASE_URL);
  console.log('SUPABASE_KEY:', SUPABASE_KEY ? SUPABASE_KEY.substring(0, 10) + '...' : 'N√£o configurado');

  if (!SUPABASE_URL || !SUPABASE_KEY) {
    console.error('‚ö†Ô∏è Credenciais do Supabase n√£o configuradas corretamente!');
    process.exit(1);
  }

  try {
    // Criar cliente do Supabase
    const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    
    // Verificar conex√£o
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ö†Ô∏è Erro ao conectar com Supabase:', error.message);
      process.exit(1);
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
    
    // Verificar configura√ß√£o de autentica√ß√£o (tentar criar um usu√°rio de teste)
    console.log('Testando cria√ß√£o de usu√°rio (isso falhar√° se o email n√£o for v√°lido)...');
    
    // Usando um email de teste - este √© apenas para verificar a resposta da API
    const testEmail = 'teste@exemplo.org';
    const testPassword = 'Test@123456';
    
    const { data: userData, error: userError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
    });
    
    if (userError) {
      if (userError.message.includes('Email address is invalid')) {
        console.log('‚ö†Ô∏è O Supabase est√° rejeitando registros de email. Isso pode ocorrer por:');
        console.log('   1. O provedor Email/Password n√£o est√° habilitado no Supabase');
        console.log('   2. H√° restri√ß√µes de dom√≠nio de email configuradas');
        console.log('   3. A verifica√ß√£o de email est√° configurada para ser necess√°ria');
        console.log('\nVerifique as configura√ß√µes no painel do Supabase em Authentication > Providers > Email');
      } else {
        console.log('‚ö†Ô∏è Erro ao testar cria√ß√£o de usu√°rio:', userError.message);
      }
    } else {
      console.log('‚úÖ API de cria√ß√£o de usu√°rio est√° funcionando!');
      console.log('Resposta:', userData);
      
      // Se o usu√°rio foi criado, limpe-o
      if (userData.user?.id) {
        console.log('Limpando usu√°rio de teste...');
        // Nota: Voc√™ precisa do acesso de service_role para excluir usu√°rios
        // A API p√∫blica n√£o permite isso, ent√£o o usu√°rio de teste permanecer√°
      }
    }
    
    console.log('\nüìã Resumo da verifica√ß√£o:');
    console.log('- Conex√£o com Supabase: ‚úÖ');
    console.log('- API de autentica√ß√£o:', userError ? '‚ö†Ô∏è Configura√ß√£o necess√°ria' : '‚úÖ');
    
    // Sugerir pr√≥ximos passos
    if (userError) {
      console.log('\nüîß Pr√≥ximos passos:');
      console.log('1. Acesse o painel do Supabase para seu projeto');
      console.log('2. V√° para Authentication > Providers > Email');
      console.log('3. Certifique-se de que o provedor Email/Password est√° habilitado');
      console.log('4. Remova quaisquer restri√ß√µes de dom√≠nio de email, se houver');
      console.log('5. Configure a verifica√ß√£o de email de acordo com suas necessidades');
    }
    
  } catch (error) {
    console.error('‚ö†Ô∏è Erro ao verificar configura√ß√£o do Supabase:', error);
    process.exit(1);
  }
}

checkSupabaseConfig();